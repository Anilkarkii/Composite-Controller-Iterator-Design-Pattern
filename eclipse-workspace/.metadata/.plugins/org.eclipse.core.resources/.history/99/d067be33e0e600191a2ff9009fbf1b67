package DesignPattern;

import java.awt.Graphics;
import java.awt.Point;
import java.lang.reflect.Constructor;

public class Controller {
	
	
	Shape comp =new Composite();
	
	
	public Controller(String str, Point point,Graphics g){
		System.out.println(str);
		
		try {
			
			
			Class<?> cls= Class.forName("DesignPattern."+str);
			ClassLoader cLoader = cls.getClassLoader();
		       
	         /* returns the Class object associated with the class or interface 
	            with the given string name, using the given classloader. */
	         Class cls2 = Class.forName("DesignPattern."+str, true, cLoader); 
	    
	         Constructor<?> dogConstructor = cls.getConstructor(int.class, int.class);
	         Object dog = dogConstructor.newInstance(point.x,point.y);
			
			System.out.println(cls2.getDeclaredConstructors());
			//Shape s=(Shape)cls.newInstance();
			//System.out.println(s);
		
		
		} catch (Exception e) {
			// TODO Auto-generated catch block
			System.out.println("Come on man!");
		}
		
		
	/*
		
		if(str.equals("Circle")) {
			Shape circle=new Circle(point.x,point.y);
			comp.addShapeNPoint(circle);
			
		}
		else
		{
			Shape rectangle= new Rectangle(point.x,point.y);
			comp.addShapeNPoint(rectangle);
			
		}
		*/
	
		
	}
	
	public void drawAllShapesController(Graphics g) 
	{
		comp.drawAllShapes(g);
	}
	
	
	
}
